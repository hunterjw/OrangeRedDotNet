@using System.Web
@using RedditDotNet.Models.Links

<div class="card text-dark bg-light mb-1 @(Link.Data.Stickied ? "border-success" : "")"
     @ondblclick="Card_OnDblClick">
    <div class="card-body">
        <div class="row">
            <div class="col-auto d-flex justify-content-center flex-column w-25 link-preview-row">
                <div class="rounded w-100 h-100 link-preview-img"
                     style="background-image: url(@GetPreviewUrl(Link));">
                </div>
            </div>
            <div class="col">
                <h6 class="card-subtitle text-muted mb-1">
                    <a class="text-decoration-none" href="/r/@Link.Data.Subreddit">
                        /r/@Link.Data.Subreddit
                    </a>
                </h6>
                <h4 class="card-title @(Link.Data.Stickied ? "text-success" : "")">
                    @((MarkupString)HttpUtility.HtmlDecode(Link.Data.Title))
                </h4>
                <h6 class="card-subtitle text-muted mb-1">
                    Posted by <a class="text-decoration-none" href="/user/@Link.Data.Author">/u/@Link.Data.Author</a>
                    <Flair FlairBackgroundColor="@Link.Data.AuthorFlairBackgroundColor"
                           FlairRichtext="@Link.Data.AuthorFlairRichtext"
                           FlairText="@Link.Data.AuthorFlairText"
                           FlairTextColor="@Link.Data.AuthorFlairTextColor"
                           FlairType="@Link.Data.AuthorFlairType" />
                </h6>
                <h6 class="card-subtitle text-muted mb-1">
                    @Link.Data.CreatedUtc.ToLocalDateTime()
                </h6>
                <Awardings Data="@Link.Data.AllAwardings" />
                <Flair FlairBackgroundColor="@Link.Data.LinkFlairBackgroundColor"
                       FlairRichtext="@Link.Data.LinkFlairRichtext"
                       FlairText="@Link.Data.LinkFlairText"
                       FlairTextColor="@Link.Data.LinkFlairTextColor"
                       FlairType="@Link.Data.LinkFlairType"
                       IsOriginalContent="@Link.Data.IsOriginalContent"
                       Over18="@Link.Data.Over18"
                       Spoiler="@Link.Data.Spoiler"
                       Stickied="@Link.Data.Stickied"
                       Locked="@Link.Data.Locked"
                       Archived="Link.Data.Archived"
                       LinkType="@Link.GetLinkType()" />
            </div>
        </div>
        <div class="@(ContentCollapsed ? "collapse" : "mt-3 row g-0 d-flex justify-content-center flex-row")">
            @if (Link.Data.Spoiler && !SpoilerAcknowledged && Link.GetLinkType() != LinkType.Crosspost)
            {
                <button class="btn btn-secondary w-100" @onclick="SpoilerButton_OnClick">Show Spoiler</button>
            }
            else if (Link.Data.Over18 && !NsfwAcknowledged && Link.GetLinkType() != LinkType.Crosspost)
            {
                <button class="btn btn-danger w-100" @onclick="NsfwButton_OnClick">Show NSFW</button>
            }
            else
            {
                @switch (Link.GetLinkType())
                {
                    case LinkType.Image:
                        <img class="rounded link-content-img" src="@Link.Data.Url" alt="@Link.Data.Title" />
                        break;
                    case LinkType.Video:
                        <Video LinkId="@Link.Data.Id" RedditVideo="@GetRedditVideoObject()" />

                        break;
                    case LinkType.Gallery:
                        <Gallery LinkId="@Link.Data.Id"
                     GalleryData="@Link.Data.GalleryData"
                     MediaMetadata="@Link.Data.MediaMetadata" />
                        break;
                    case LinkType.Text:
                        @((MarkupString)HttpUtility.HtmlDecode(Link.Data.SelftextHtml))
                        break;
                    case LinkType.Crosspost:
                        <LinkCard Link="@(new RedditDotNet.Models.Links.Link { Kind = Link.Kind, Data = Link.Data.CrosspostParentList.First() })"
                      ContentCollapsed="@ContentCollapsed" />
                        break;
                    case LinkType.EmbeddedMedia:
                        @GetEmbeddedMediaContent()
                        break;
                }
            }
        </div>
    </div>
    <div class="card-footer">
        <div class="row">
            <div class="col-auto">
                <VoteInput Likes="@Link.Data.Likes"
                           Score="@Link.Data.Score"
                           ScoreHidden="@Link.Data.HideScore"
                           Id="@Link.Data.Name"
                           Archived="@Link.Data.Archived" />
            </div>
            <div class="col-auto">
                @switch (Link.GetLinkType())
                {
                    case LinkType.Link:
                        <a class="btn btn-light" href="@Link.Data.Url" target="_blank">
                            <span class="oi oi-share-boxed"></span>
                        </a>
                        break;
                    case LinkType.Image:
                    case LinkType.Video:
                    case LinkType.Gallery:
                    case LinkType.Crosspost:
                    case LinkType.EmbeddedMedia:
                        <button class="btn btn-light" @onclick="ContentCollapsedButton_OnClick">
                            @if (ContentCollapsed)
                            {
                                <span class="oi oi-fullscreen-enter"></span>
                            }
                            else
                            {
                                <span class="oi oi-fullscreen-exit"></span>
                            }
                        </button>
                        break;
                    case LinkType.Poll:
                        @*TODO*@
                        <button class="btn btn-light">
                            <span class="oi oi-question-mark"></span>
                        </button>
                        break;
                    case LinkType.Text:
                        if (!string.IsNullOrWhiteSpace(Link.Data.SelftextHtml))
                        {
                            <button class="btn btn-light" @onclick="ContentCollapsedButton_OnClick">
                                @if (ContentCollapsed)
                                {
                                    <span class="oi oi-chevron-bottom"></span>
                                }
                                else
                                {
                                    <span class="oi oi-chevron-top"></span>
                                }
                            </button>
                        }
                        else
                        {
                            <button class="btn btn-light">
                                <span class="oi oi-share-boxed"></span>
                            </button>
                        }
                        break;
                }
            </div>
            <div class="col-auto">
                <button class="btn btn-light" @onclick="CommentsButton_OnClick">
                    <span class="oi oi-comment-square"></span>
                    <span>@Link.Data.NumComments.ToDisplayString()</span>
                </button>
            </div>
            @if (Link.Data.NumDuplicates != null && Link.Data.NumDuplicates > 0)
            {
                <div class="col-auto">
                    <button class="btn btn-light" @onclick="DuplicatesButton_OnClick">
                        <span class="oi oi-chat"></span>
                        <span>Other discussions (@Link.Data.NumDuplicates)</span>
                    </button>
                </div>
            }
        </div>
    </div>
</div>