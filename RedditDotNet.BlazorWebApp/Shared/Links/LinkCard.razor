@using System.Web
@using RedditDotNet.Models.Links

<Card TextColor="App.TextColor" Background="App.Background" Margin="Margin.Is1.FromBottom"
      @ondblclick="Card_OnDblClick" Border="@(Link.Data.Stickied ? Border.Success : Border.Secondary)">
    <CardBody>
        <Row>
            <Column Flex="Flex.JustifyContent.Center.Column" Class="link-preview-col">
                <Div Border="Border.Rounded" Width="Width.Is100" Height="Height.Is100"
                     Class="link-preview-img" Style="@($"background-image: url({GetPreviewUrl(Link)});")" />
            </Column>
            <Column>
                <CardSubtitle Size="6" TextColor="TextColor.Muted" Margin="Margin.Is1.FromBottom">
                    <Anchor To="@($"/r/{Link.Data.Subreddit}")" Class="text-decoration-none">
                        /r/@Link.Data.Subreddit
                    </Anchor>
                </CardSubtitle>
                <CardTitle Size="4" TextColor="@(Link.Data.Stickied ? TextColor.Success : App.TextColor)">
                    @((MarkupString)HttpUtility.HtmlDecode(Link.Data.Title))
                </CardTitle>
                <CardSubtitle Size="6" TextColor="TextColor.Muted" Margin="Margin.Is1.FromBottom">
                    Posted by
                    <Anchor To="@($"/user/{Link.Data.Author}")" Class="text-decoration-none">
                        /u/@Link.Data.Author
                    </Anchor>
                    <Flair FlairBackgroundColor="@Link.Data.AuthorFlairBackgroundColor"
                           FlairRichtext="@Link.Data.AuthorFlairRichtext"
                           FlairText="@Link.Data.AuthorFlairText"
                           FlairTextColor="@Link.Data.AuthorFlairTextColor"
                           FlairType="@Link.Data.AuthorFlairType" />
                </CardSubtitle>
                <CardSubtitle Size="6" TextColor="TextColor.Muted" Margin="Margin.Is1.FromBottom">
                    @Link.Data.CreatedUtc.ToLocalDateTime()
                </CardSubtitle>
                <Awardings Data="@Link.Data.AllAwardings" />
                <Flair FlairBackgroundColor="@Link.Data.LinkFlairBackgroundColor"
                       FlairRichtext="@Link.Data.LinkFlairRichtext"
                       FlairText="@Link.Data.LinkFlairText"
                       FlairTextColor="@Link.Data.LinkFlairTextColor"
                       FlairType="@Link.Data.LinkFlairType"
                       IsOriginalContent="@Link.Data.IsOriginalContent"
                       Over18="@Link.Data.Over18"
                       Spoiler="@Link.Data.Spoiler"
                       Stickied="@Link.Data.Stickied"
                       Locked="@Link.Data.Locked"
                       Archived="Link.Data.Archived"
                       LinkType="@Link.GetLinkType()"
                       Saved="@Link.Data.Saved"
                       Hidden="@Link.Data.Hidden" />
            </Column>
        </Row>
        @if (!ContentCollapsed)
        {
            <Row Margin="Margin.Is3.FromTop" Flex="Flex.JustifyContent.Center.Row" NoGutters="true">
                @if (Link.Data.Spoiler && !SpoilerAcknowledged && Link.GetLinkType() != LinkType.Crosspost)
                {
                    <Button Color="Color.Secondary" Width="Width.Is100" @onclick="() => SpoilerAcknowledged = !SpoilerAcknowledged">
                        Show Spoiler
                    </Button>
                }
                else if (Link.Data.Over18 && !NsfwAcknowledged && Link.GetLinkType() != LinkType.Crosspost)
                {
                    <Button Color="Color.Danger" Width="Width.Is100" @onclick="() => NsfwAcknowledged = !NsfwAcknowledged">
                        Show NSFW
                    </Button>
                }
                else
                {
                    @switch (Link.GetLinkType())
                    {
                        case LinkType.Image:
                            <Image Width="Width.Auto" Border="Border.Rounded" Source="@Link.Data.Url" Text="@Link.Data.Title" />
                            break;
                        case LinkType.Video:
                            <Video LinkId="@Link.Data.Id" RedditVideo="@GetRedditVideoObject()" />
                            break;
                        case LinkType.Gallery:
                            <Gallery LinkId="@Link.Data.Id" GalleryData="@Link.Data.GalleryData" MediaMetadata="@Link.Data.MediaMetadata" />
                            break;
                        case LinkType.Text:
                            @((MarkupString)HttpUtility.HtmlDecode(Link.Data.SelftextHtml))
                            break;
                        case LinkType.Crosspost:
                            <LinkCard Link="@(new RedditDotNet.Models.Links.Link { Kind = Link.Kind, Data = Link.Data.CrosspostParentList.First() })" ContentCollapsed="@ContentCollapsed" />
                            break;
                        case LinkType.EmbeddedMedia:
                            @GetEmbeddedMediaContent()
                            break;
                    }
                }
            </Row>
        }
    </CardBody>
    <CardFooter Class="border-secondary">
        <Row>
            <Column ColumnSize="ColumnSize.IsAuto">
                <VoteInput Likes="@Link.Data.Likes"
                           Score="@Link.Data.Score"
                           ScoreHidden="@Link.Data.HideScore"
                           Id="@Link.Data.Name"
                           Archived="@Link.Data.Archived" />
            </Column>
            <Column ColumnSize="ColumnSize.IsAuto">
                @switch (Link.GetLinkType())
                {
                    case LinkType.Link:
                        <Button Color="App.DefaultButtonColor" Border="Border.Secondary"
                        Type="ButtonType.Link" To="@Link.Data.Url" Target="Target.Blank">
                            <span class="oi oi-share-boxed"></span>
                        </Button>
                        break;
                    case LinkType.Image:
                    case LinkType.Video:
                    case LinkType.Gallery:
                    case LinkType.Crosspost:
                    case LinkType.EmbeddedMedia:
                        <Button Color="App.DefaultButtonColor" Border="Border.Secondary"
                        @onclick="() => ContentCollapsed = !ContentCollapsed">
                            <span class="oi @(ContentCollapsed ? "oi-fullscreen-enter" : "oi-fullscreen-exit")"></span>
                        </Button>
                        break;
                    case LinkType.Poll:
                        @*TODO*@
                        break;
                    case LinkType.Text:
                        if (!string.IsNullOrWhiteSpace(Link.Data.Selftext))
                        {
                            <Button Color="App.DefaultButtonColor" Border="Border.Secondary"
                        @onclick="() => ContentCollapsed = !ContentCollapsed">
                                <span class="oi @(ContentCollapsed ? "oi-chevron-bottom" : "oi-chevron-top")"></span>
                            </Button>
                        }
                        else
                        {
                            <Button Color="App.DefaultButtonColor" Type="ButtonType.Link" Border="Border.Secondary"
                        To="@($"/r/{Link.Data.Subreddit}/comments/{Link.Data.Id}")">
                                <span class="oi oi-share-boxed"></span>
                            </Button>
                        }
                        break;
                }
            </Column>
            <Column ColumnSize="ColumnSize.IsAuto">
                <Button Color="App.DefaultButtonColor" Type="ButtonType.Link" Border="Border.Secondary"
                        To="@($"/r/{Link.Data.Subreddit}/comments/{Link.Data.Id}")">
                    <span class="oi oi-comment-square"></span>
                    <span>@Link.Data.NumComments.ToDisplayString()</span>
                </Button>
            </Column>
            @if (Link.Data.NumDuplicates != null && Link.Data.NumDuplicates > 0)
            {
                <Column ColumnSize="ColumnSize.IsAuto">
                    <Button Color="App.DefaultButtonColor" Type="ButtonType.Link" Border="Border.Secondary"
                        To="@($"/r/{Link.Data.Subreddit}/duplicates/{Link.Data.Id}")">
                        <span class="oi oi-chat"></span>
                        <span>Other discussions (@Link.Data.NumDuplicates)</span>
                    </Button>
                </Column>
            }
            @if (RedditService.LoggedIn)
            {
                <Column ColumnSize="ColumnSize.IsAuto">
                    <Button Color="App.DefaultButtonColor" Border="Border.Secondary" @onclick="SaveToggleButton_OnClick">
                        <span class="oi oi-bookmark @(Link.Data.Saved ? "text-primary" : "")"></span>
                    </Button>
                </Column>
                <Column ColumnSize="ColumnSize.IsAuto">
                    <Button Color="App.DefaultButtonColor" Border="Border.Secondary" @onclick="HideToggleButton_OnClick">
                        <span class="oi oi-ban @(Link.Data.Hidden ? "text-danger" : "")"></span>
                    </Button>
                </Column>
            }
        </Row>
    </CardFooter>
</Card>