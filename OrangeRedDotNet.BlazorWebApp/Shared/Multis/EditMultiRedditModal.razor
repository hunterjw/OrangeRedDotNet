<Validations Mode="ValidationMode.Auto" 
Model="UpdateModel" 
ValidateOnLoad="false" 
StatusChanged="OnValidationsStatusChange" 
@ref="Validations">
    <Blazorise.ValidationSummary />
    <Validation>
        <Field Margin="ThemeService.AppTheme.SpacingSeparate">
            <FieldLabel>Name</FieldLabel>
            <TextEdit Background="ThemeService.AppTheme.Background" TextColor="ThemeService.AppTheme.TextColor"
                      Border="Border.Secondary" @bind-Text="UpdateModel.DisplayName" />
        </Field>
    </Validation>
    <Validation>
        <Field Margin="ThemeService.AppTheme.SpacingSeparate">
            <FieldLabel>Description</FieldLabel>
            <MemoEdit Rows="3"
                      Background="ThemeService.AppTheme.Background" TextColor="ThemeService.AppTheme.TextColor"
                      Border="Border.Secondary" @bind-Text="UpdateModel.DescriptionMd" />
        </Field>
    </Validation>
    @if (!HideVisibility)
    {
        <Validation>
            <Field Margin="ThemeService.AppTheme.SpacingSeparate">
                <FieldLabel>Privacy</FieldLabel>
                <Select Background="ThemeService.AppTheme.Background" TextColor="ThemeService.AppTheme.TextColor"
                    Border="Border.Secondary" @bind-SelectedValue="UpdateModel.Visibility">
                    <SelectItem Value="@("private")">Private</SelectItem>
                    <SelectItem Value="@("public")">Public</SelectItem>
                </Select>
            </Field>
        </Validation>
    }
    <Buttons Width="Width.Is100">
        <Button Type="ButtonType.Button" Color="ThemeService.AppTheme.DefaultButtonColor" Border="Border.Secondary" @onclick="CancelButton_OnClick">
            Cancel
        </Button>
        <Button Type="ButtonType.Submit" Color="Color.Success" Disabled="SaveButtonDisabled" @onclick="HandleValidSubmit">
            Save
        </Button>
    </Buttons>
</Validations>